name: Kotlin CI with JDK 21 + shadowJar + jpackage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run ktlintFormat
        run: ./gradlew ktlintFormat

      - name: Build shadowJar
        run: ./gradlew shadowJar

      - name: Package portable app with jpackage (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $version = "1.0.${{ github.run_number }}"
          $jarFile = (Get-ChildItem -Path build/libs -Filter 'super-share-*.jar').Name

          jpackage --type app-image `
            --name SuperShare `
            --input build/libs `
            --main-jar $jarFile `
            --main-class MainKt `
            --app-version $version `
            --dest build/dist `
            --install-dir SuperShare `
            --add-modules java.base,java.desktop `
            --vendor "zeyan-du"

          # Copy extra resources into the output directory
          Copy-Item -Path "app\cfg" -Destination "build\dist\SuperShare\cfg" -Recurse -Force
          Copy-Item -Path "app\runtime" -Destination "build\dist\SuperShare\runtime" -Recurse -Force

          Compress-Archive -Path (Get-ChildItem -Path build\dist\SuperShare) -DestinationPath SuperShare-windows-portable.zip

      - name: Verify resources included in app image (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $appPath = "build\dist\SuperShare"
          if (-Not (Test-Path "$appPath\cfg")) {
            Write-Error "❌ cfg not found"
            exit 1
          } else {
            Write-Host "cfg found ✅"
          }
          if (-Not (Test-Path "$appPath\runtime")) {
            Write-Error "❌ runtime not found"
            exit 1
          } else {
            Write-Host "runtime found ✅"
          }

      - name: Upload portable app artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: super-share-windows-portable-${{ github.run_number }}
          path: SuperShare-windows-portable.zip

      - name: Package .dmg with jpackage (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          APP_VERSION="1.0.${{ github.run_number }}"
          JAR_FILE=$(basename $(find build/libs -name "super-share-*.jar"))
          
          # Create temp resource directory
          mkdir -p macos-resources
          
          # Copy config and runtime into the resource dir
          cp -R app/cfg macos-resources/
          cp -R app/runtime macos-resources/

          jpackage \
            --type dmg \
            --name SuperShare \
            --input build/libs \
            --main-jar "$JAR_FILE" \
            --main-class MainKt \
            --app-version "$APP_VERSION" \
            --icon assets/file-transformer.icns \
            --resource-dir macos-resources \
            --vendor "zeyan-du"

      - name: Verify resources included in .app (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          APP_PATH=$(find . -name "SuperShare.app" -type d | head -n 1)
          echo "Checking resources in $APP_PATH"
          test -d "$APP_PATH/Contents/Resources/cfg" && echo "cfg found ✅" || (echo "❌ cfg not found" && exit 1)
          test -d "$APP_PATH/Contents/Resources/runtime" && echo "runtime found ✅" || (echo "❌ runtime not found" && exit 1)

      - name: Upload .dmg artifact (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: super-share-dmg-${{ github.run_number }}
          path: SuperShare-*.dmg
