name: Kotlin CI with JDK 21 + shadowJar + jpackage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run ktlintFormat
        run: ./gradlew ktlintFormat

      - name: Build shadowJar
        run: ./gradlew shadowJar

      - name: Create Windows EXE with Launch4j
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          # Define variables
          $version = "1.0.${{ github.run_number }}"
          $jarFile = Get-ChildItem -Path build/libs -Filter 'super-share-*.jar' | Select-Object -First 1
          $jarPath = $jarFile.FullName
          $exeName = "SuperShare.exe"
          $launch4jDir = "$env:USERPROFILE\launch4j"
          $configFile = "launch4j-config.xml"

          # Download Launch4j
          Invoke-WebRequest -Uri "https://sourceforge.net/projects/launch4j/files/launch4j-3/3.50/launch4j-3.50-win32.zip/download" -OutFile "launch4j.zip"
          Expand-Archive -Path "launch4j.zip" -DestinationPath "$launch4jDir"

          # Create config file for Launch4j
          Set-Content -Path $configFile -Value @"
          <launch4jConfig>
            <dontWrapJar>false</dontWrapJar>
            <headerType>gui</headerType>
            <jar>$jarPath</jar>
            <outfile>build/dist/$exeName</outfile>
            <errTitle></errTitle>
            <cmdLine></cmdLine>
            <chdir>.</chdir>
            <priority>normal</priority>
            <downloadUrl>https://java.com/download</downloadUrl>
            <supportUrl></supportUrl>
            <customProcName>false</customProcName>
            <stayAlive>false</stayAlive>
            <restartOnCrash>false</restartOnCrash>
            <manifest></manifest>
            <icon>assets/file-transformer.ico</icon>
            <versionInfo>
              <fileVersion>$version</fileVersion>
              <txtFileVersion>$version</txtFileVersion>
              <productVersion>$version</productVersion>
              <txtProductVersion>$version</txtProductVersion>
              <fileDescription>SuperShare App</fileDescription>
              <productName>SuperShare</productName>
              <companyName>zeyan-du</companyName>
              <internalName>SuperShare</internalName>
              <originalFilename>$exeName</originalFilename>
            </versionInfo>
          </launch4jConfig>
          "@

          # Run Launch4j
          & "$launch4jDir\launch4j\launch4j.exe" $configFile


      - name: Upload EXE artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: super-share-windows-exe-${{ github.run_number }}
          path: build/dist/SuperShare.exe

      - name: Package .dmg with jpackage (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          APP_VERSION="1.0.${{ github.run_number }}"
          JAR_FILE=$(basename $(find build/libs -name "super-share-*.jar"))
          
          # Create temp resource directory
          mkdir -p macos-resources
          
          # Copy config and runtime into the resource dir
          cp -R app/cfg macos-resources/
          cp -R app/runtime macos-resources/

          jpackage \
            --type dmg \
            --name SuperShare \
            --input build/libs \
            --main-jar "$JAR_FILE" \
            --main-class MainKt \
            --app-version "$APP_VERSION" \
            --icon assets/file-transformer.icns \
            --resource-dir macos-resources \
            --vendor "zeyan-du"

      - name: Verify resources included in .app (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          APP_PATH=$(find . -name "SuperShare.app" -type d | head -n 1)
          echo "Checking resources in $APP_PATH"
          test -d "$APP_PATH/Contents/Resources/cfg" && echo "cfg found ✅" || (echo "❌ cfg not found" && exit 1)
          test -d "$APP_PATH/Contents/Resources/runtime" && echo "runtime found ✅" || (echo "❌ runtime not found" && exit 1)

      - name: Upload .dmg artifact (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: super-share-dmg-${{ github.run_number }}
          path: SuperShare-*.dmg
